{"componentChunkName":"component---src-templates-blog-post-js","path":"/migrating-from-svn-to-git-choose-workflow/","result":{"data":{"site":{"siteMetadata":{"title":"Danilo Del Busso","social":{"twitter":"danilo_delbusso"}}},"markdownRemark":{"id":"359eab5e-58b2-5765-baff-b09c65ac1788","excerpt":"While you might think of SVN as an anachronistic tool relegated to the bin of dead software that we once loved, some small teams and big corporations are yet to…","html":"<p><img src=\"https://raw.githubusercontent.com/danilo-delbusso/danilo-delbusso.me/master/content/blog/migrating-from-svn-to-git-choose-workflow/cover.jpg\"></p>\n<p>While you might think of <a href=\"https://subversion.apache.org/\">SVN</a> as an anachronistic tool relegated to the bin of dead software that we once loved, some small teams and big corporations are yet to make the jump to newer VCSs like <a href=\"https://git-scm.com/\">Git</a>.</p>\n<p>When migrating to Git, it is important to think of what your team needs. Choosing a workflow is a crucial part of that process, so I will be comparing briefly the two simplest Git workflows to help you conceptualise the very basic differences between SVN and Git’s approaches to keep track of your work in a team.</p>\n<p><img src=\"https://github.com/danilo-delbusso/danilo-delbusso.me/blob/master/content/blog/migrating-from-svn-to-git-choose-workflow/svn_vs_git_stack_overflow.png?raw=true\"></p>\n<p><em>The death of SVN shown as a percentage of Stack Overflow questions per month between Git and SVN</em></p>\n<p>To follow along, you will need some basic understanding of how Git works.</p>\n<h2>Centralised Workflow</h2>\n<p>The Centralized Workflow uses a central repository to serve as the single point-of-entry for all changes to the project.</p>\n<p>This workflow is the closest to SVN and might be easier for teams who are just getting started. However, if you are moving to Git with the goal of taking advantage of more complex, flexible workflows, this option might look very limiting.</p>\n<h3>How it works</h3>\n<p>Developers push their changes directly to the central repository, on the <strong><em>master</em></strong> branch.\nIf there are changes that have not been pulled from the central repository, Git will refuse the request like so:</p>\n<p><img src=\"https://raw.githubusercontent.com/danilo-delbusso/danilo-delbusso.me/master/content/blog/migrating-from-svn-to-git-choose-workflow/refuse-master-push.png\"></p>\n<p>The developer must pull from <strong><em>master</em></strong> before being able to push their changes.</p>\n<h3>Best Practice for pulling: <code class=\"language-text\">--rebase</code></h3>\n<p>It is best practice in the Centralised Workflow model to pull using the rebase flag, like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull --rebase origin master</code></pre></div>\n<p>The <code class=\"language-text\">--rebase</code> flag tells Git to move all of the new commits to the tip of the <strong><em>master</em></strong> branch after synchronising it with the changes from the central repository, as shown below:</p>\n<p><img src=\"https://raw.githubusercontent.com/danilo-delbusso/danilo-delbusso.me/master/content/blog/migrating-from-svn-to-git-choose-workflow/rebase-flag-diagram.png\"></p>\n<p>Without <code class=\"language-text\">--rebase</code> the pull would still work but it’ll add a superfluous merge commit.</p>\n<p><code class=\"language-text\">--rebase</code> also allows the developer to pull the commits from <strong><em>master</em></strong> one at a time, which allows solving conflicts in smaller chunks.</p>\n<p>In order to move forward with <code class=\"language-text\">--rebase</code>, use:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> rebase --continue</code></pre></div>\n<p>In order to abort the entire <code class=\"language-text\">--rebase</code>, use:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> rebase --abort</code></pre></div>\n<h2>Feature Branch Workflow</h2>\n<p>Git allows team members to easily keep their work isolated until features are fully implemented and tested.</p>\n<p>The simplest implementation of this design is the feature branch workflow, in which feature development takes place in a separate branch.</p>\n<p><img src=\"https://github.com/danilo-delbusso/danilo-delbusso.me/blob/master/content/blog/migrating-from-svn-to-git-choose-workflow/branch.png?raw=true\"></p>\n<h3>How it works</h3>\n<p>Developers create a new branch for every feature that needs to be developed.</p>\n<h3>Create a branch</h3>\n<p>After <a href=\"https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging\">creating a new branch</a>, the developer can start working on them from local using the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout --track origin/BRANCH-NAME</code></pre></div>\n<h3>Make changes</h3>\n<p>The developer now works on their branch and stages, commits, and pushes only to the feature branch, not the <strong><em>master</em></strong>.</p>\n<h3>Pull requests and peer reviews on VCS platforms</h3>\n<p>Once the feature has been developed, the developer can create a pull request. This feature is usually available on websites such as <a href=\"https://www.github.com\">GitHub</a> or <a href=\"https://www.bitbucket.org/\">BitBucket</a>.</p>\n<p>The developer can ask other team users as reviewers in order to double-check and test the changes before they are merged to the <strong><em>master</em></strong> branch.</p>\n<p>The reviewers can reject the pull request and ask for changes to be made.\nOnce the feature is ready, the pull request can be accepted, and the branch merged with the <strong><em>master</em></strong> branch.</p>\n<p>In the following example, we see how two branches are created at the same time (<strong><em>feature/add-test.html</em></strong> and <strong><em>update/update-readme-file</em></strong>).\nThe two developers work at the same time on their feature, create separate pull requests, and merge them.</p>\n<p><img src=\"https://raw.githubusercontent.com/danilo-delbusso/danilo-delbusso.me/master/content/blog/migrating-from-svn-to-git-choose-workflow/branches.png\"></p>\n<h3>Best Practices</h3>\n<p>The <strong><em>master</em></strong> branch is sacrosanct and pushing and merging to it should not be taken lightly.</p>\n<p>It is good practice to delete the feature branch once it has been merged with the <strong><em>master</em></strong> branch as it is not needed anymore.</p>","frontmatter":{"title":"Migrating From SVN to Git: Choose Your First Workflow","date":"September 05, 2020","description":"Understand the two simplest Git workflows to help choose how to migrate your team from SVN."},"fields":{"slug":"/migrating-from-svn-to-git-choose-workflow/"}}},"pageContext":{"slug":"/migrating-from-svn-to-git-choose-workflow/","previous":{"fields":{"slug":"/how-to-pimp-your-github-in-three-steps/"},"frontmatter":{"title":"Level Up Your Github Profile Page in 3 Easy Steps"}},"next":null}}}