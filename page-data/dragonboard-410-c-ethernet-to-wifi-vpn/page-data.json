{"componentChunkName":"component---src-templates-blog-post-js","path":"/dragonboard-410-c-ethernet-to-wifi-vpn/","result":{"data":{"site":{"siteMetadata":{"title":"Danilo Del Busso","social":{"twitter":"danilo_delbusso"}}},"markdownRemark":{"id":"052397fb-f34e-5418-a6e8-510243e08350","excerpt":"This set of commands and instructions are what I needed to do in order to set up a Wi-Fi access point on a Qualcomm Dragonboard 410c with a NordVPN connection…","html":"<p>This set of commands and instructions are what I needed to do in order to set up a Wi-Fi access point on a Qualcomm Dragonboard 410c with a NordVPN connection.</p>\n<p>Please read the disclaimers and list of items needed at the bottom of the page.</p>\n<p>I will use <a href=\"https://www.nano-editor.org/\">nano</a> throughout this tutorial but you can obviously follow along with your favourite editor.</p>\n<h1>Create Access Point</h1>\n<h2>0. Before starting</h2>\n<p>You will need to connect the ethernet connection to the board using the adapter.\nOnce you have successfully connected run the command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ip</span> a</code></pre></div>\n<p>and look for the names of the ethernet to usb, and the wifi adapter.</p>\n<p>Look in the <strong><em>“Adapter Names”</em></strong> section of the appendix for more information.</p>\n<p>From now on, I will be referring to the ethernet adapter as <strong><em>eth0</em></strong> and to the wifi one as <strong><em>wlan0</em></strong>.</p>\n<h2>1. First steps</h2>\n<p>After flashing the firmware, you will need to install a few relevant packages.\nRun the commands:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> upgrade\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> hostapd dnsmasq dhcpcd5 iptables iw rfkill bridge-utils\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> openvpn -y</code></pre></div>\n<p>now, stop the <code class=\"language-text\">hostapd</code> and <code class=\"language-text\">dnsmasq</code> processes by running:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl stop hostapd\n<span class=\"token function\">sudo</span> systemctl stop dnsmasq</code></pre></div>\n<h2>2.DHCPCD configuration</h2>\n<p>We now need to modify our <code class=\"language-text\">dhcpcd</code> configuration. </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">nano</span> /etc/dhcpcd.conf</code></pre></div>\n<p>and add this to the bottom:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">interface wlan0\n    static <span class=\"token assign-left variable\">ip_address</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.220.1/24\n    nohook wpa_supplicant</code></pre></div>\n<p>save the file and restart the <code class=\"language-text\">dhcpcd</code> service:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl restart dhcpcd</code></pre></div>\n<h3>Disclaimer</h3>\n<p>I have noticed that this step, though crucial to the successfull configuration, will not allow you to use SSH to connect to the dragonboard. It will also block you from accessing the internet from the board. This step can also be done at the end so you can skip it for now.</p>\n<h2>3. Hostapd setup</h2>\n<p>We will need to create a hostapad configuration.</p>\n<p>Create a new file at this location:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">nano</span> /etc/hostapd/hostapd.conf</code></pre></div>\n<p>and add this text.\n<strong>FOR YOUR OWN SECURITY CHANGE THE ssid= AND wpa_passphrase= FIELDS</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">interface</span><span class=\"token operator\">=</span>wlan0\n<span class=\"token assign-left variable\">driver</span><span class=\"token operator\">=</span>nl80211\n\n<span class=\"token assign-left variable\">hw_mode</span><span class=\"token operator\">=</span>g\n<span class=\"token assign-left variable\">channel</span><span class=\"token operator\">=</span><span class=\"token number\">6</span>\n<span class=\"token assign-left variable\">ieee80211n</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token assign-left variable\">wmm_enabled</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token assign-left variable\">macaddr_acl</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token assign-left variable\">ignore_broadcast_ssid</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n\n<span class=\"token assign-left variable\">auth_algs</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token assign-left variable\">wpa</span><span class=\"token operator\">=</span><span class=\"token number\">2</span>\n<span class=\"token assign-left variable\">wpa_key_mgmt</span><span class=\"token operator\">=</span>WPA-PSK\n<span class=\"token assign-left variable\">wpa_pairwise</span><span class=\"token operator\">=</span>TKIP\n<span class=\"token assign-left variable\">rsn_pairwise</span><span class=\"token operator\">=</span>CCMP\n\n<span class=\"token comment\"># This is the name of the network</span>\n<span class=\"token assign-left variable\">ssid</span><span class=\"token operator\">=</span>Essos\n<span class=\"token comment\"># The network passphrase</span>\n<span class=\"token assign-left variable\">wpa_passphrase</span><span class=\"token operator\">=</span>ValarMorghulis</code></pre></div>\n<p>then, edit the file at:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">nano</span> /etc/default/hostapd</code></pre></div>\n<p>by subtituting the line</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#DAEMON_CONF=\"\" </span></code></pre></div>\n<p>with</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">DAEMON_CONF</span><span class=\"token operator\">=</span><span class=\"token string\">\"/etc/hostapd/hostapd.conf\"</span></code></pre></div>\n<p>notice we have deleted the <code class=\"language-text\">#</code>.</p>\n<p>Save the file and do the same but for another file.\nThis time, edit the file</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">nano</span> /etc/init.d/hostapd</code></pre></div>\n<p>and replace</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">DAEMON_CONF</span><span class=\"token operator\">=</span> </code></pre></div>\n<p>with</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">DAEMON_CONF</span><span class=\"token operator\">=</span>/etc/hostapd/hostapd.conf</code></pre></div>\n<h2>4. dnsmasq setup</h2>\n<p>We rename the current configuration file by running the command</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> /etc/dnsmasq.conf /etc/dnsmasq.conf.orig</code></pre></div>\n<p>then we open:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">nano</span> /etc/dnsmasq.conf</code></pre></div>\n<p>and add the following lines:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">interface</span><span class=\"token operator\">=</span>wlan0       <span class=\"token comment\"># Use interface wlan0  </span>\n<span class=\"token assign-left variable\">server</span><span class=\"token operator\">=</span><span class=\"token number\">1.1</span>.1.1       <span class=\"token comment\"># Use Cloudflare DNS  </span>\ndhcp-range<span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.220.50,192.168.220.150,12h <span class=\"token comment\"># IP range and lease time </span></code></pre></div>\n<p>save the file.</p>\n<h2>5. Forwarding traffic</h2>\n<p>First, we enable it throught the <strong><em>systctl.conf</em></strong> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">nano</span> /etc/sysctl.conf</code></pre></div>\n<p>then remove the line</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#net.ipv4.ip_forward=1</span></code></pre></div>\n<p>and replace it with</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">net.ipv4.ip_forward<span class=\"token operator\">=</span><span class=\"token number\">1</span></code></pre></div>\n<p>In order to avoid rebooting to activate the changes we run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">sh</span> -c <span class=\"token string\">\"echo 1 > /proc/sys/net/ipv4/ip_forward\"</span></code></pre></div>\n<h3>Iptables</h3>\n<p>I had to follow <a href=\"https://github.com/netblue30/firejail/issues/2232#issuecomment-436423748\">this comment on an iptables issue</a>in order to run iptables on my dragonboard.</p>\n<p>It suggested to run</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> update-alternatives --set iptables /usr/sbin/iptables-legacy</code></pre></div>\n<p>in order to downgrade the iptables install to a version which supports the commands we will use</p>\n<p>Run the following command to add new rules to the iptable:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</code></pre></div>\n<p>then save the rules</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">sh</span> -c <span class=\"token string\">\"iptables-save > /etc/iptables.ipv4.nat\"</span></code></pre></div>\n<p>and to make sure the settins are run when we boot edit the file:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">nano</span> /etc/rc.local</code></pre></div>\n<p>find</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">exit</span> <span class=\"token number\">0</span></code></pre></div>\n<p>and add in an empty line above “exit 0”</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">iptables-restore <span class=\"token operator\">&lt;</span> /etc/iptables.ipv4.nat</code></pre></div>\n<p>save, start hostapd and dnsmasq, and reboot</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">service</span> hostapd start\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> dnsmasq start\n<span class=\"token function\">sudo</span> <span class=\"token function\">reboot</span></code></pre></div>\n<h1>Create VPN Access Point</h1>\n<h2>1. OpenVPN setup</h2>\n<p>I will be showing the setup for a NordVPN account, for VyprVPN, go to the original RaspberryPi tutorial <a href=\"https://pimylifeup.com/raspberry-pi-vpn-access-point/\">here</a></p>\n<h3>Authentication file</h3>\n<p>go to</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /etc/openvpn</code></pre></div>\n<p>and create a new file</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">nano</span> /etc/openvpn/auth.txt</code></pre></div>\n<p>Insert NordVPN’s email and password on two separate and adjacent lines, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">email\npassword</code></pre></div>\n<h3>Get the OpenVPN files</h3>\n<p>go at the location</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /etc/openvpn</code></pre></div>\n<p>Go to the <a href=\"https://nordvpn.com/ovpn/\">ovpn section on the NordVPN website</a>.\nFind the server you need, right click on the <strong><em>“Download UDP”</em></strong> button and copy the link by pressing <strong><em>“Copy Link Address”</em></strong>.</p>\n<p>paste the link address in this command</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">wget</span> <span class=\"token operator\">&lt;</span>INSERT_LINK_HERE<span class=\"token operator\">></span></code></pre></div>\n<p>I have chosen the <strong><em>it91</em></strong> server. Change the next commands by substituing <strong><em>it91</em></strong> with your chosen server.</p>\n<p>In order to make the rest of the tutorial slightly easier, rename the file you just downloaded. Also, we need to change the extension from .ovpn to .conf.</p>\n<p>The file I downloaded is named <strong><em>it91.nordvpn.com.udp1194.ovpn</em></strong></p>\n<p>I change its name by executing:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> it91.nordvpn.com.udp1194.ovpn it91.conf</code></pre></div>\n<h2>Setting up the VPN</h2>\n<p>Change the content of the newly renamed</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">nano</span> it91.conf</code></pre></div>\n<p>by deleting the line</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">auth-user-pass</code></pre></div>\n<p>and replacing it with</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">auth-user-pass auth.txt</code></pre></div>\n<p>save the file.</p>\n<p>Now to automatically connect to this server on startup we modify the file</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">nano</span> /etc/default/openvpn</code></pre></div>\n<p>by replacing the line</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#autostart=\"all\"</span></code></pre></div>\n<p>with </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">autostart</span><span class=\"token operator\">=</span><span class=\"token string\">\"it91\"</span></code></pre></div>\n<h2>Iptables setup</h2>\n<p>We need to flush our current iptables</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> iptables -F\n<span class=\"token function\">sudo</span> iptables -t nat -F\n<span class=\"token function\">sudo</span> iptables -X</code></pre></div>\n<p>then install our new iptables</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> iptables -t nat -A POSTROUTING -o tun0 -j MASQUERADE</code></pre></div>\n<p>and then overwrite the old rules from the tutorial without VPN</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">sh</span> -c <span class=\"token string\">\"iptables-save > /etc/iptables.ipv4.nat\"</span></code></pre></div>\n<h2>Create Bridge</h2>\n<p>The last step requires us to create a bridge between the ethernet and wifi ports.\nWe can do this by editing the file</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">nano</span> /etc/network/interfaces</code></pre></div>\n<p>and adding the following lines:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">auto br0\n\niface br0 inet dhcp\n\nbridge-ports eth0 wlan0</code></pre></div>\n<p>then we run the following two commands</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">service</span> network-manager stop\n\n<span class=\"token function\">sudo</span> rfkill unblock wlan</code></pre></div>\n<p>and we bring up the bridge <strong><em>br0</em></strong> </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">ifup</span> br0</code></pre></div>\n<p>and run our hostapd configuration by running</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> /etc/init.d/hostapd restart</code></pre></div>\n<p>finally, reboot the device</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">reboot</span></code></pre></div>\n<h1>Appendix</h1>\n<h2>The host machine I used:</h2>\n<ul>\n<li>Operating System: Manjaro Linux </li>\n<li>KDE Plasma Version: 5.15.1</li>\n<li>KDE Frameworks Version: 5.55.0</li>\n<li>Qt Version: 5.12.1</li>\n<li>Kernel Version: 4.19.24-1-MANJARO</li>\n<li>OS Type: 64-bit</li>\n<li>Processors: 8 × Intel® Core™ i7-7700HQ CPU @ 2.80GHz</li>\n<li>Memory: 15.6 GiB of RAM</li>\n</ul>\n<h2>Adapter Names</h2>\n<p>In my case, after running the\n<code class=\"language-text\">ip a</code> command (you could also run <code class=\"language-text\">sudo ifconfig</code>, though it is deprecated at the time of writing this tutorial) I obtained something on the lines of this result:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>: lo: <span class=\"token operator\">&lt;</span>LOOPBACK,UP,LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class=\"token number\">1000</span>\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet <span class=\"token number\">127.0</span>.0.1/8 scope <span class=\"token function\">host</span> lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope <span class=\"token function\">host</span> \n       valid_lft forever preferred_lft forever\n<span class=\"token number\">2</span>: enx008e8a8d9465: <span class=\"token operator\">&lt;</span>NO-CARRIER,BROADCAST,MULTICAST,UP<span class=\"token operator\">></span> mtu <span class=\"token number\">1500</span> qdisc fq_codel state DOWN group default qlen <span class=\"token number\">1000</span>\n    link/ether <span class=\"token number\">88</span>:d7:f6:1f:28:c9 brd ff:ff:ff:ff:ff:ff\n<span class=\"token number\">3</span>: wlan0: <span class=\"token operator\">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">1500</span> qdisc mq state UP group default qlen <span class=\"token number\">1000</span>\n    link/ether f0:03:8c:ab:dc:89 brd ff:ff:ff:ff:ff:ff\n    inet <span class=\"token number\">192.168</span>.1.192/24 brd <span class=\"token number\">192.168</span>.1.255 scope global dynamic noprefixroute wlp3s0\n       valid_lft 20331sec preferred_lft 20331sec\n    inet6 fe80::aee5:8162:f8c9:f2ea/64 scope <span class=\"token function\">link</span> noprefixroute \n       valid_lft forever preferred_lft forever</code></pre></div>\n<p>We ignore the <code class=\"language-text\">lo</code> and we notice that the wifi adapter is named <strong><em>wlan0</em></strong> and the ethernet to usb one is named <strong><em>enx008e8a8d9465</em></strong>. Names are usually similar and easily spotted, especially if you run a clean install of Debian as I sugges you do. In that case, you should only see three results and it will be easy to spot which ones are the ones you need.</p>\n<h3>DISCLAIMERS</h3>\n<p>🚨<strong>THESE STEPS ARE THE ONES THAT WORKED FOR ME, I TAKE NO REPONSIBILITY IF ANYTHING DOES NOT GO AS PLANNED OR YOUR DEVICE/S ARE DAMAGED IN ANY WAY</strong>🚨</p>\n<h4>Hardware</h4>\n<p>In order to reproduce the steps I made you will need:</p>\n<ul>\n<li>A host machine (I used my laptop, specs in the Appendix section)</li>\n<li>A Qualcomm Dragonboard 410c</li>\n<li>USB to microUSB cable</li>\n<li>A NordVPN or VyprVPN account</li>\n<li>Ethernet to USB adapter</li>\n<li>USB Mouse and/or keyboard (not required to perform flash)</li>\n<li>\n<p>HDMI Monitor with full size HDMI cable (not required to perform flash)</p>\n<h4>Dragonboard Firmware</h4>\n<p>I suggest using Debian as it is the easiest to install and has the most support.</p>\n</li>\n<li><a href=\"https://www.96boards.org/documentation/consumer/dragonboard/dragonboard410c/downloads/debian.md.html\">Download Page</a> </li>\n<li><a href=\"https://www.96boards.org/documentation/consumer/dragonboard/dragonboard410c/downloads/debian.md.html\">Installation instructions using a Linux host machine</a></li>\n</ul>\n<p>In order to write this post, I combined these tutorials:</p>\n<ul>\n<li><a href=\"https://pimylifeup.com/raspberry-pi-wireless-access-point/\">Raspberry-Pi Access Point</a></li>\n<li><a href=\"https://pimylifeup.com/raspberry-pi-vpn-access-point/\">Raspberry-Pi VPN Access Point</a></li>\n<li><a href=\"https://trisquel.info/en/wiki/make-bridge-ethernet-wifi\">Make a bridge Ethernet to WIFI</a></li>\n</ul>","frontmatter":{"title":"Dragonboard 410c Ethernet to Wi-Fi Access Point with VPN","date":"April 24, 2019","description":"How to set up a WiFi VPN Access Point using a Qualcomm Dragonboard 410c development board"},"fields":{"slug":"/dragonboard-410-c-ethernet-to-wifi-vpn/"}}},"pageContext":{"slug":"/dragonboard-410-c-ethernet-to-wifi-vpn/","previous":null,"next":{"fields":{"slug":"/covid-app-shows-governemnt-dont-need-compromise/"},"frontmatter":{"title":"The COVID App That Shows How Governments Don't Need To Compromise On Data Privacy"}}}}}