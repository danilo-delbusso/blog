{"componentChunkName":"component---src-templates-blog-post-js","path":"/binding-controls-with-database-using-MVVM/","result":{"data":{"site":{"siteMetadata":{"title":"Danilo Del Busso","social":{"twitter":"danilo_delbusso"}}},"markdownRemark":{"id":"7b188daf-e943-5701-b8a9-a739cf37e54a","excerpt":"MVVM is a popular design pattern amongst .NET developers to achieve a clear separation of concerns and facilitate test driven development (TDD). While MVVM isâ€¦","html":"<p><a href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel\">MVVM</a> is a popular design pattern amongst .NET developers to achieve a clear separation of concerns and facilitate test driven development (TDD).</p>\n<p>While MVVM is mainly used together with really powerful databinding mechanisms (like the ones in <a href=\"https://en.wikipedia.org/wiki/Windows_Presentation_Foundation\">WPF</a>), it is possible to use it and take advantage of it while developing for the web.</p>\n<p>This may be useful in teams that support different kinds of applications using the .NET framework, that do not want to use multiple design patterns.</p>\n<h2>Create a ASP.NET control using MVVM</h2>\n<p>For the purposes of this tutorial, we will only explore how to bind and update a <code class=\"language-text\">&lt;asp:DropDownList/&gt;</code> to a Oracle Database, using an <code class=\"language-text\">&lt;asp:ObjectDataSource /&gt;</code> object for data binding and update.</p>\n<p>This approach will work with any other databound controls and is therefore quite flexible.</p>\n<h3>The Data Layer (Binder)</h3>\n<p>We will be fetching data using the <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.data.oledb?view=dotnet-plat-ext-3.1\">OLE DB</a> Data Provider.</p>\n<p>Our query will return a <code class=\"language-text\">DataTable</code> object in this format:</p>\n<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>NAME</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>London</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Rome</td>\n</tr>\n<tr>\n<td>3</td>\n<td>New York</td>\n</tr>\n</tbody>\n</table>\n<br/>\nLet's add it to our `PageDL.cs` file in the `Project.DL` namespace:\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Project<span class=\"token punctuation\">.</span>DL</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PageDL</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> ConnectionString <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">PageDL</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> connectionString<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            ConnectionString <span class=\"token operator\">=</span> connectionString<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>we will be adding a <code class=\"language-text\">GetDropDownData()</code> method which will return the data as such:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">DataTable</span> <span class=\"token function\">GetDropDownData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> query <span class=\"token operator\">=</span> <span class=\"token string\">@\"SELECT ID, NAME FROM TABLE_NAME\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> table <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DataTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> conn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">OleDbConnection</span><span class=\"token punctuation\">(</span>ConnectionString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    conn<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cmd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">OleDbCommand</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> reader <span class=\"token operator\">=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">{</span>\n                            table<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">//error logging here</span>\n                <span class=\"token keyword\">throw</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> table<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>The Business Logic (View Model)</h3>\n<p>Now we just need to add a small method to the View Model which will be called by the View.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Project<span class=\"token punctuation\">.</span>BL</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PageBL</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">PageDL</span> _dataLayer<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">PageBL</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PageDL</span> dataLayer<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _dataLayer <span class=\"token operator\">=</span> dataLayer<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">DataTable</span> <span class=\"token function\">GetDropDownData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> _dataLayer<span class=\"token punctuation\">.</span><span class=\"token function\">GetDropDownData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>The View</h3>\n<p>Now on to the juciest part. We will create a <code class=\"language-text\">&lt;asp:DropDownList /&gt;</code> control and bind it to an instance of <code class=\"language-text\">PageBL.cs</code> via a <code class=\"language-text\">&lt;asp:ObjectDataSource /&gt;</code>.</p>\n<h4>Connect the View with its View Model</h4>\n<p>In <code class=\"language-text\">Page.aspx.cs</code></p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Project</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Page</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Web<span class=\"token punctuation\">.</span>UI<span class=\"token punctuation\">.</span>Page</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> connectionString <span class=\"token operator\">=</span> ConfigurationManager<span class=\"token punctuation\">.</span>ConnectionStrings<span class=\"token punctuation\">[</span><span class=\"token string\">\"CS\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ConnectionString<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">PageBL</span> businessLogic<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">PageDL</span> dataLayer<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">protected</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Page_Init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            dataLayer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PageDL</span><span class=\"token punctuation\">(</span>connectionString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            businessLogic <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PageBL</span><span class=\"token punctuation\">(</span>dataLayer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Letâ€™s add the <code class=\"language-text\">&lt;asp:ObjectDataSource /&gt;</code> to the <code class=\"language-text\">Page.aspx</code> file</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">asp:</span>ObjectDataSource</span> <span class=\"token attr-name\">runat</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>server<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token attr-name\">ID</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>odsDDL<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token attr-name\">SelectMethod</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>GetDropDownData<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token attr-name\">TypeName</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Projet.BL.ProjectBL<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token attr-name\">OnObjectCreating</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>odsDDL_ObjectCreating<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>              \n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">asp:</span>ObjectDataSource</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>When the <code class=\"language-text\">OnObjectCreating</code> method is called, we will be assigning an instanciated object of <code class=\"language-text\">PageBL</code> so that the View can call the View Model object.</p>\n<p>To do so we add the event method to <code class=\"language-text\">Page.aspx.cs</code> like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"> <span class=\"token keyword\">protected</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">odsDDL_ObjectCreating</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ObjectDataSourceEventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span>ObjectInstance <span class=\"token operator\">=</span> businessLogic<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Bind the Control</h4>\n<p>We can now bind the <code class=\"language-text\">&lt;asp:DropDownList /&gt;</code> control to the ViewModel and populate it using the MVVM pattern.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">asp:</span>DropDownList</span> <span class=\"token attr-name\">runat</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>server<span class=\"token punctuation\">\"</span></span> \n                <span class=\"token attr-name\">ID</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ddl<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token attr-name\">DataSourceID</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>odsDDL<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token attr-name\">DataTextField</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>NAME<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token attr-name\">DataValueField</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ID<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">asp:</span>DropDownList</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>You can find the source code <a href=\"https://github.com/danilo-delbusso/blog/blob/master/content/blog/binding-controls-with-database-using-MVVM/source\">HERE</a></p>","frontmatter":{"title":"Binding Controls With Oracle Database using MVVM Design Pattern in ASP.NET","date":"July 03, 2020","description":"How to create ASP.NET controls that bind data from an Oracle Database using MVVM"},"fields":{"slug":"/binding-controls-with-database-using-MVVM/"}}},"pageContext":{"slug":"/binding-controls-with-database-using-MVVM/","previous":{"fields":{"slug":"/covid-app-shows-governemnt-dont-need-compromise/"},"frontmatter":{"title":"The COVID App That Shows How Governments Don't Need To Compromise On Data Privacy"}},"next":null}}}